import{B as u,g as y,s as w,d as k,i as b,l as L,a as O,c as E,b as x,e as R,H as h,f as M}from"./privyConnector--nGFtbB8.js";import"./jsx-runtime-DF5SV9au.js";import"./index-TjLUG_Bo.js";import"./index-B1yGdhtz.js";import"./walletConnect-BmfqopVd.js";import"./isAddressEqual-BZ0F7Med.js";import"./index.es-CQTua3R0.js";import"./sha3-C47P6eDd.js";import"./_u64-CPCIv9dJ.js";import"./hooks.module-B3Nfv_UP.js";import"./index-7JkPJWjm.js";import"./index-BHYcTakE.js";import"./sha2-Cuix5xAA.js";class S extends u{constructor({callbackSelector:s,cause:t,data:n,extraData:i,sender:d,urls:a}){var o;super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],(o=t.metaMessages)!=null&&o.length?"":[],"Offchain Gateway Call:",a&&["  Gateway URL(s):",...a.map(p=>`    ${y(p)}`)],`  Sender: ${d}`,`  Data: ${n}`,`  Callback selector: ${s}`,`  Extra data: ${i}`].flat(),name:"OffchainLookupError"})}}class $ extends u{constructor({result:s,url:t}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${y(t)}`,`Response: ${w(s)}`],name:"OffchainLookupResponseMalformedError"})}}class q extends u{constructor({sender:s,to:t}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${t}`,`OffchainLookup sender address: ${s}`],name:"OffchainLookupSenderMismatchError"})}}const N="0x556f1830",T={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function W(c,{blockNumber:s,blockTag:t,data:n,to:i}){const{args:d}=k({data:n,abi:[T]}),[a,o,p,f,r]=d,{ccipRead:e}=c,m=e&&typeof(e==null?void 0:e.request)=="function"?e.request:C;try{if(!b(i,a))throw new q({sender:a,to:i});const l=o.includes(L)?await O({data:p,ccipRequest:m}):await m({data:p,sender:a,urls:o}),{data:g}=await E(c,{blockNumber:s,blockTag:t,data:x([f,R([{type:"bytes"},{type:"bytes"}],[l,r])]),to:i});return g}catch(l){throw new S({callbackSelector:f,cause:l,data:n,extraData:r,sender:a,urls:o})}}async function C({data:c,sender:s,urls:t}){var i;let n=new Error("An unknown error occurred.");for(let d=0;d<t.length;d++){const a=t[d],o=a.includes("{data}")?"GET":"POST",p=o==="POST"?{data:c,sender:s}:void 0,f=o==="POST"?{"Content-Type":"application/json"}:{};try{const r=await fetch(a.replace("{sender}",s.toLowerCase()).replace("{data}",c),{body:JSON.stringify(p),headers:f,method:o});let e;if((i=r.headers.get("Content-Type"))!=null&&i.startsWith("application/json")?e=(await r.json()).data:e=await r.text(),!r.ok){n=new h({body:p,details:e!=null&&e.error?w(e.error):r.statusText,headers:r.headers,status:r.status,url:a});continue}if(!M(e)){n=new $({result:e,url:a});continue}return e}catch(r){n=new h({body:p,details:r.message,url:a})}}throw n}export{C as ccipRequest,W as offchainLookup,T as offchainLookupAbiItem,N as offchainLookupSignature};
